
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
import random
from tkinter import Frame, Tk, Canvas, Entry, Text, Button, PhotoImage
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import  FigureCanvasTkAgg
import matplotlib.pyplot as plt

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def sales_dash():
    salesDash()


class salesDash(Frame):
    def __init__(self, parent, controller=None, *args, **kwargs):
        Frame.__init__(self, parent, *args, **kwargs)
        self.parent = parent

        canvas = Canvas(
            self,
            bg = "#FFFFFF",
            height = 496,
            width = 1064,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        canvas.place(x = 0, y = 0)
        canvas.create_rectangle(
            0.0,
            0.0,
            1002.0,
            496.0,
            fill="#FFFFFF",
            outline="")

        self.image_image_1 = PhotoImage(
            file=relative_to_assets("image_1.png"))
        image_1 = canvas.create_image(
            501.0,
            71.0,
            image=self.image_image_1
        )

        self.image_image_2 = PhotoImage(
            file=relative_to_assets("image_2.png"))
        image_2 = canvas.create_image(
            829.0,
            71.0,
            image=self.image_image_2
        )

        self.image_image_3 = PhotoImage(
            file=relative_to_assets("image_3.png"))
        image_3 = canvas.create_image(
            179.0,
            71.0,
            image=self.image_image_3
        )


        
        # Generating sample data for sales
        years = ['2019', '2020', '2021', '2022', '2023', '2024']
        amounts = [random.uniform(10, 30) for _ in range(len(years))]  # Generating random amounts for each year

        # Create figure and subplot for the histogram
        fig_hist = Figure(figsize=(8, 4), facecolor='#3776F0')
        ax_hist = fig_hist.add_subplot()

        # Define custom colors for the bars
        colors = ['#003B95', '#DB7932', '#E30909', '#C49BBB', '#34A853', '#FF8800']

        # Plot histogram with custom colors
        for i in range(len(amounts)):
            ax_hist.bar(years[i], amounts[i], color=colors[i % len(colors)])

        # Set labels and title
        ax_hist.set_xlabel('Year', color='white')
        ax_hist.set_ylabel('Revenue', color='white')
        ax_hist.set_title('Revenue Distribution Over Years', color='white')

        # Set background color
        ax_hist.set_facecolor('#D9D9D9')

        # Set text color for ticks
        ax_hist.tick_params(colors='white')

        # Create canvas and display the plot
        canvas_hist = FigureCanvasTkAgg(figure=fig_hist, master=self)
        canvas_hist.draw()
        canvas_hist.get_tk_widget().place(x=111, y=157, width=373.73, height=288.78)
        

    
        # Create figure and subplot for the area graph
        fig_area = Figure(figsize=(8, 4), facecolor='#3776F0')
        ax_area = fig_area.add_subplot()

        # Plot area graph
        ax_area.fill_between(years, amounts, color='#003B95', alpha=0.7)

        # Set labels and title
        ax_area.set_xlabel('Year', color='white')
        ax_area.set_ylabel('Revenue', color='white')
        ax_area.set_title('Sales Performance Over Years', color='white')

        # Set background color
        ax_area.set_facecolor('#D9D9D9')

        # Set text color for ticks
        ax_area.tick_params(colors='white')

        # Create canvas and display the plot
        canvas_area = FigureCanvasTkAgg(figure=fig_area, master=self)
        canvas_area.draw()
        canvas_area.get_tk_widget().place(x=528, y=157, width=373.73, height=288.78)