
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Frame, Tk, Canvas, Entry, Text, Button, PhotoImage
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import  FigureCanvasTkAgg
import matplotlib.pyplot as plt

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def hotel_dash():
    hotelDash()


class hotelDash(Frame):
    def __init__(self, parent, controller=None, *args, **kwargs):
        Frame.__init__(self, parent, *args, **kwargs)
        self.parent = parent

        canvas = Canvas(
            self,
            bg = "#FFFFFF",
            height = 496,
            width = 1002,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        canvas.place(x = 0, y = 0)
        canvas.create_rectangle(
            0.0,
            0.0,
            1002.0,
            496.0,
            fill="#FAFAFA",
            outline="")

        self.image_image_1 = PhotoImage(
            file=relative_to_assets("image_1.png"))
        image_1 = canvas.create_image(
            251.0,
            109.0,
            image=self.image_image_1
        )

        self.image_image_2 = PhotoImage(
            file=relative_to_assets("image_2.png"))
        image_2 = canvas.create_image(
            720.0,
            109.0,
            image=self.image_image_2
        )

        self.image_image_3 = PhotoImage(
            file=relative_to_assets("image_3.png"))
        image_3 = canvas.create_image(
            351.0,
            337.0,
            image=self.image_image_3
        )

        self.image_image_4 = PhotoImage(
            file=relative_to_assets("image_4.png"))
        image_4 = canvas.create_image(
            817.0,
            349.0,
            image=self.image_image_4
        )
    
         # Data for the line graph
        accessories_data = {
            'category': ['Bookings', 'Check-in', 'Check-out', 'Stay Now'],
            'amount': [10.8, 11.8, 9.8, 20.8]  # Sample amounts
        }

        # Create a DataFrame from the data
        accessories_df = accessories_data

        # Extracting data for x-axis (categories) and y-axis (amounts)
        categories = accessories_df['category']
        amounts = accessories_df['amount']

        # Create figure for the line graph
        fig = Figure(figsize=(5, 3), facecolor='#003B95')

        # Plot line graph
        ax = fig.add_subplot(111)
        ax.plot(categories, amounts, marker='o', color='#3776F0', linestyle='-')

        # Set labels and title
        ax.set_xlabel('Category', color='white')
        ax.set_ylabel('Amount', color='white')
        ax.set_title('Reservation Graph', color='white')

        # Set background color
        ax.set_facecolor('#D9D9D9')

        # Set grid lines
        ax.grid(color='white', linestyle='--', linewidth=0.5)

        # Set text color for ticks
        ax.tick_params(colors='white')

        # Rotate x-axis labels for better visibility
        plt.xticks(rotation=45)

        # Create canvas and display the plot
        canvas = FigureCanvasTkAgg(fig, master=self)
        canvas.draw()
        canvas.get_tk_widget().place(x=78.03, y=223,width=552.07, height=230)
        
          # Data for the line graph
        accessories_data = {
            'category': ['Bookings', 'Check-in', 'Check-out', 'Stay Now'],
            'amount': [10.8, 11.8, 9.8, 20.8]  # Sample amounts
        }

        # Create a DataFrame from the data
        accessories_df = accessories_data

        # Extracting data for x-axis (categories) and y-axis (amounts)
        categories = accessories_df['category']
        amounts = accessories_df['amount']

        # Create figure for the line graph
        fig = Figure(figsize=(5, 3), facecolor='#3776F0')

        # Plot line graph
        ax = fig.add_subplot(111)
        ax.plot(categories, amounts, marker='o', color='#003B95', linestyle='-')

        # Set labels and title
        ax.set_xlabel('Category', color='white')
        ax.set_ylabel('Amount', color='white')
        ax.set_title('Reservation Graph', color='white')

        # Set background color
        ax.set_facecolor('#D9D9D9')

        # Set grid lines
        ax.grid(color='white', linestyle='--', linewidth=0.5)

        # Set text color for ticks
        ax.tick_params(colors='white')

        # Rotate x-axis labels for better visibility
        plt.xticks(rotation=45)

        # Create canvas and display the plot
        canvas = FigureCanvasTkAgg(fig, master=self)
        canvas.draw()
        canvas.get_tk_widget().place(x=77.03, y=223,width=552.07, height=230)
        
            # Sample data for accessories inventory levels
        accessories_data_pie = {
            'category': ['Rooms', 'Available', 'Occupied', 'Not Ready'],
            'amount': [10.8, 13.8, 16.8, 6.8]  # Sample amounts
        }

        # Create a DataFrame from the data
        accessories_df_pie = accessories_data_pie

        # Create figure and subplot for the pie chart
        fig_pie = Figure(figsize=(5, 3), facecolor='#3776F0')
        ax_pie = fig_pie.add_subplot()

        # Custom colors for each sector
        colors = ['#003B95', '#DB7932', '#E30909', '#C49BBB']
        # Plot pie chart
        ax_pie.pie(accessories_df_pie['amount'], labels=accessories_df_pie['category'], autopct='%1.1f%%', startangle=140, colors=colors, textprops={'color': 'white'})

        # Create canvas and display the plot
        canvas_pie = FigureCanvasTkAgg(figure=fig_pie, master=self)
        canvas_pie.draw()
        canvas_pie.get_tk_widget().place(x=669.83, y=224, width=293.66, height=250)
